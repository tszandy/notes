docker network connect       # Connect a container to a network
    --alias strings          # Add network-scoped alias for the container
    --driver-opt strings     # driver options for the network
    --ip string              # IPv4 address (e.g., 172.30.100.104)
    --ip6 string             # IPv6 address (e.g., 2001:db8::33)
    --link list              # Add link to another container
    --link-local-ip strings  # Add a link-local address for the container

docker network create        # Create a network
    --attachable             # Enable manual container attachment
    --aux-address map        # Auxiliary IPv4 or IPv6 addresses used by Network driver (default map[])
    --config-from string     # The network from which to copy the configuration
    --config-only            # Create a configuration only network
-d, --driver string          # Driver to manage the Network (default "bridge")
    --gateway strings        # IPv4 or IPv6 Gateway for the master subnet
    --ingress                # Create swarm routing-mesh network
    --internal               # Restrict external access to the network
    --ip-range strings       # Allocate container ip from a sub-range
    --ipam-driver string     # IP Address Management Driver (default "default")
    --ipam-opt map           # Set IPAM driver specific options (default map[])
    --ipv6                   # Enable IPv6 networking
    --label list             # Set metadata on a network
-o, --opt map                # Set driver specific options (default map[])
    --scope string           # Control the network's scope
    --subnet strings         # Subnet in CIDR format that represents a network segment

docker network disconnect    # Disconnect a container from a network
-f, --force                  # Force the container to disconnect from a network

docker network inspect       # Display detailed information on one or more networks
-f, --format string          # Format the output using the given Go template
-v, --verbose                # Verbose output for diagnostics

docker network ls            # List networks
-f, --filter filter          # Provide filter values (e.g. 'driver=bridge')
    --format string          # Pretty-print networks using a Go template
    --no-trunc               # Do not truncate the output
-q, --quiet                  # Only display network IDs

docker network prune         # Remove all unused networks
    --filter filter          # Provide filter values (e.g. 'until=<timestamp>')
-f, --force                  # Do not prompt for confirmation

docker network rm            # Remove one or more networks
-f, --force                  # Do not error if the network does not exist